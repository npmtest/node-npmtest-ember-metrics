{"/home/travis/build/npmtest/node-npmtest-ember-metrics/test.js":"/* istanbul instrument in package npmtest_ember_metrics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/lib.npmtest_ember_metrics.js":"/* istanbul instrument in package npmtest_ember_metrics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_metrics = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_metrics = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-metrics && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_metrics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_metrics\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_metrics.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_metrics.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_metrics.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_metrics.__dirname + '/lib.npmtest_ember_metrics.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/index.js":"/* jshint node: true */\n'use strict';\n\nvar Funnel = require('broccoli-funnel');\nvar path = require('path');\n\nfunction normalize(name) {\n  if (typeof name === 'string') {\n    name = path.basename(name, '.js');\n\n    return name.replace(/([a-z](?=[A-Z]))/g, '$1-').toLowerCase();\n  }\n}\n\nfunction uniqueStrings(arr) {\n  var out = [];\n  var dict = {};\n\n  for (var i=0;i<arr.length;i++) {\n    var obj = arr[i];\n\n    if (typeof obj === 'string' && !dict[obj]) {\n      out.push(obj);\n      dict[obj] = true;\n    }\n  }\n\n  return out;\n}\n\nfunction getEach(arr, propName) {\n  var out = [];\n\n  for (var i=0;i<arr.length;i++) {\n    var obj = arr[i];\n\n    if (typeof obj === 'object' && obj[propName]) {\n      out.push(obj[propName]);\n    }\n  }\n\n  return out;\n}\n\nmodule.exports = {\n  name: 'ember-metrics',\n\n  included: function(app, parentAddon) {\n    this._super.included.apply(this, arguments);\n\n    var target = parentAddon || app;\n\n    // allow addon to be nested - see: https://github.com/ember-cli/ember-cli/issues/3718\n    if (target.app) {\n      target = target.app;\n    }\n\n    var config = target.project.config(target.env) || {};\n    var addonConfig = config[this.name] || {};\n    var discovered = ['base'];\n\n    if (addonConfig.includeAdapters) {\n      discovered = discovered.concat(addonConfig.includeAdapters);\n    }\n\n    if (config.metricsAdapters) {\n      discovered = discovered.concat(getEach(config.metricsAdapters, 'name'));\n    }\n\n    this.whitelisted = uniqueStrings(discovered.map(normalize));\n  },\n\n  treeForAddon: function() {\n    // see: https://github.com/ember-cli/ember-cli/issues/4463\n    var tree = this._super.treeForAddon.apply(this, arguments);\n\n    return this.filterAdapters(tree, new RegExp('^modules\\/' + this.name + '\\/metrics\\-adapters\\/', 'i'));\n  },\n\n  filterAdapters: function(tree, regex) {\n    var whitelisted = this.whitelisted;\n\n    return new Funnel(tree, {\n      exclude: [function(name) {\n        return regex.test(name) && whitelisted.indexOf(path.basename(name, '.js')) === -1;\n      }]\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/addon/metrics-adapters/base.js":"/* jshint unused: false */\nimport Ember from 'ember';\nimport canUseDOM from '../utils/can-use-dom';\n\nconst {\n  Object: emberObject,\n  aliasMethod,\n  assert,\n  guidFor,\n  typeOf,\n  set\n} = Ember;\n\nfunction makeToString(ret) {\n  return (() => ret);\n}\n\nexport default emberObject.extend({\n  init() {\n    assert(`[ember-metrics] ${this.toString()} must implement the init hook!`);\n  },\n\n  willDestroy() {\n    assert(`[ember-metrics] ${this.toString()} must implement the willDestroy hook!`);\n  },\n\n  toString() {\n    const hasToStringExtension = typeOf(this.toStringExtension) === 'function';\n    const extension = hasToStringExtension ? ':' + this.toStringExtension() : '';\n    const ret = `ember-metrics@metrics-adapter:${extension}:${guidFor(this)}`;\n\n    this.toString = makeToString(ret);\n    return ret;\n  },\n\n  metrics: null,\n  config: null,\n  identify() {},\n  trackEvent() {},\n  trackPage() {},\n  alias() {}\n});\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/addon/metrics-adapters/facebook-pixel.js":"import Ember from 'ember';\nimport canUseDOM from '../utils/can-use-dom';\nimport objectTransforms from '../utils/object-transforms';\nimport BaseAdapter from './base';\n\nconst {\n  assert,\n  $,\n  get\n} = Ember;\n\nconst { compact } = objectTransforms;\n\nexport default BaseAdapter.extend({\n  toStringExtension() {\n    return 'FacebookPixel';\n  },\n\n  init() {\n    const config = get(this, 'config');\n    const { id } = config;\n\n    assert(`[ember-metrics] You must pass a valid \\`id\\` to the ${this.toString()} adapter`, id);\n\n    if (canUseDOM) {\n      /* jshint ignore:start */\n      !function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?\n      n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;\n      n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;\n      t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,\n      document,'script','https://connect.facebook.net/en_US/fbevents.js');\n      /* jshint ignore:end */\n\n      window.fbq('init', id);\n\n      // Leave this call due to Facebook API docs\n      // https://developers.facebook.com/docs/facebook-pixel/api-reference#setup\n      this.trackEvent({ event: 'PageView' });\n    }\n  },\n\n  trackEvent(options = {}) {\n    if (!canUseDOM) { return; }\n\n    const compactedOptions = compact(options);\n    const { event } = compactedOptions;\n\n    if (!event) { return; }\n    delete compactedOptions.event;\n\n    if (window.fbq) {\n      window.fbq('track', event, compactedOptions);\n    }\n  },\n\n  trackPage(options = {}) {\n    if (!canUseDOM) { return; }\n\n    window.fbq('track', 'PageView', options);\n  },\n\n  willDestroy() {\n    if (!canUseDOM) { return; }\n\n    $('script[src*=\"fbevents.js\"]').remove();\n    delete window.fbq;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/addon/metrics-adapters/google-analytics.js":"import Ember from 'ember';\nimport canUseDOM from '../utils/can-use-dom';\nimport objectTransforms from '../utils/object-transforms';\nimport BaseAdapter from './base';\n\nconst {\n  isPresent,\n  copy,\n  assert,\n  get,\n  $,\n  String: { capitalize },\n} = Ember;\nconst { compact } = objectTransforms;\nconst assign = Ember.assign || Ember.merge;\n\nexport default BaseAdapter.extend({\n  toStringExtension() {\n    return 'GoogleAnalytics';\n  },\n\n  init() {\n    const config = copy(get(this, 'config'));\n    const { id, sendHitTask, trace } = config;\n    let { debug } = config;\n\n    assert(`[ember-metrics] You must pass a valid \\`id\\` to the ${this.toString()} adapter`, id);\n\n    delete config.id;\n\n    if (debug) { delete config.debug; }\n    if (sendHitTask) { delete config.sendHitTask; }\n    if (trace) { delete config.trace; }\n\n    const hasOptions = isPresent(Object.keys(config));\n\n    if (canUseDOM) {\n\n      /* jshint ignore:start */\n      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n      })(window,document,'script',`https://www.google-analytics.com/analytics${debug ? '_debug' : ''}.js`,'ga');\n      /* jshint ignore:end */\n\n      if (trace === true) {\n        window.ga_debug = { trace: true };\n      }\n\n      if (hasOptions) {\n        window.ga('create', id, config);\n      } else {\n        window.ga('create', id, 'auto');\n      }\n\n      if (sendHitTask === false) {\n        window.ga('set', 'sendHitTask', null);\n      }\n\n    }\n  },\n\n  identify(options = {}) {\n    const compactedOptions = compact(options);\n    const { distinctId } = compactedOptions;\n\n    if (canUseDOM) {\n      window.ga('set', 'userId', distinctId);\n    }\n  },\n\n  trackEvent(options = {}) {\n    const compactedOptions = compact(options);\n    const sendEvent = { hitType: 'event' };\n    const eventKeys = ['category', 'action', 'label', 'value'];\n    let gaEvent = {};\n\n    if (compactedOptions.nonInteraction) {\n      gaEvent.nonInteraction = compactedOptions.nonInteraction;\n      delete compactedOptions.nonInteraction;\n    }\n\n    for (let key in compactedOptions) {\n      if (eventKeys.includes(key)) {\n        const capitalizedKey = capitalize(key);\n        gaEvent[`event${capitalizedKey}`] = compactedOptions[key];\n      } else {\n        gaEvent[key] = compactedOptions[key];\n      }\n    }\n\n    const event = assign(sendEvent, gaEvent);\n    if (canUseDOM) {\n      window.ga('send', event);\n    }\n\n    return event;\n  },\n\n  trackPage(options = {}) {\n    const compactedOptions = compact(options);\n    const sendEvent = { hitType: 'pageview' };\n\n    const event = assign(sendEvent, compactedOptions);\n    if (canUseDOM) {\n      window.ga('send', event);\n    }\n\n    return event;\n  },\n\n  willDestroy() {\n    if (canUseDOM) {\n      $('script[src*=\"google-analytics\"]').remove();\n      delete window.ga;\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/addon/metrics-adapters/google-tag-manager.js":"import Ember from 'ember';\nimport canUseDOM from '../utils/can-use-dom';\nimport objectTransforms from '../utils/object-transforms';\nimport BaseAdapter from './base';\n\nconst {\n  assert,\n  get,\n  set,\n  $,\n  getWithDefault,\n  String: { capitalize }\n} = Ember;\nconst assign = Ember.assign || Ember.merge;\nconst {\n  compact\n} = objectTransforms;\n\nexport default BaseAdapter.extend({\n  dataLayer: 'dataLayer',\n\n  toStringExtension() {\n    return 'GoogleTagManager';\n  },\n\n  init() {\n    const config = get(this, 'config');\n    const { id } = config;\n    const dataLayer = getWithDefault(config,'dataLayer', 'dataLayer');\n\n    assert(`[ember-metrics] You must pass a valid \\`id\\` to the ${this.toString()} adapter`, id);\n\n    set(this, 'dataLayer', dataLayer);\n\n    if (canUseDOM) {\n      /* jshint ignore:start */\n      (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n      })(window,document,'script',get(this, 'dataLayer'),id);\n      /* jshint ignore:end */\n    }\n  },\n\n  trackEvent(options = {}) {\n    const compactedOptions = compact(options);\n    const dataLayer = get(this, 'dataLayer');\n    const gtmEvent = {'event': compactedOptions['event']};\n\n    delete compactedOptions['event'];\n\n    for (let key in compactedOptions) {\n      const capitalizedKey = capitalize(key);\n      gtmEvent[`event${capitalizedKey}`] = compactedOptions[key];\n    }\n\n    if (canUseDOM) {\n      window[dataLayer].push(gtmEvent);\n    }\n\n    return gtmEvent;\n  },\n\n  trackPage(options = {}) {\n    const compactedOptions = compact(options);\n    const dataLayer = get(this, 'dataLayer');\n    const sendEvent = {\n      event: compactedOptions['event'] || 'pageview'\n    };\n\n    const pageEvent = assign(sendEvent, compactedOptions);\n\n    if (canUseDOM) {\n      window[dataLayer].push(pageEvent);\n    }\n\n    return pageEvent;\n  },\n\n  willDestroy() {\n    if (canUseDOM) {\n      $('script[src*=\"gtm.js\"]').remove();\n      delete window.dataLayer;\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/addon/metrics-adapters/intercom.js":"import Ember from 'ember';\nimport canUseDOM from '../utils/can-use-dom';\nimport objectTransforms from '../utils/object-transforms';\nimport BaseAdapter from './base';\n\nconst {\n  $,\n  assert,\n  get,\n} = Ember;\nconst {\n  compact,\n  without,\n} = objectTransforms;\nconst assign = Ember.assign || Ember.merge;\n\nexport default BaseAdapter.extend({\n  booted: false,\n\n  toStringExtension() {\n    return 'Intercom';\n  },\n\n  init() {\n    const { appId } = get(this, 'config');\n\n    assert(`[ember-metrics] You must pass a valid \\`appId\\` to the ${this.toString()} adapter`, appId);\n\n    if (canUseDOM) {\n      /* jshint ignore:start */\n      (function(){var w=window;var ic=w.Intercom;if(typeof ic===\"function\"){ic('reattach_activator');ic('update',{});}else{var d=document;var i=function(){i.c(arguments)};i.q=[];i.c=function(args){i.q.push(args)};w.Intercom=i;function l(){var s=d.createElement('script');s.type='text/javascript';s.async=true;\n      s.src=`https://widget.intercom.io/widget/${appId}`;\n      var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);} l(); }})()\n      /* jshint ignore:end */\n    }\n  },\n\n  identify(options = {}) {\n    const { appId } = get(this, 'config');\n    const compactedOptions = compact(options);\n    const { distinctId } = compactedOptions;\n    const props = without(compactedOptions, 'distinctId');\n\n    props.app_id = appId;\n    if (distinctId) {\n      props.user_id = distinctId;\n    }\n\n    assert(`[ember-metrics] You must pass \\`distinctId\\` or \\`email\\` to \\`identify()\\` when using the ${this.toString()} adapter`, props.email || props.user_id);\n\n    const method = this.booted ? 'update' : 'boot';\n    if (canUseDOM) {\n      window.Intercom(method, props);\n      this.booted = true;\n    }\n  },\n\n  trackEvent(options = {}) {\n    const compactedOptions = compact(options);\n    const { event } = compactedOptions;\n    const props = without(compactedOptions, 'event');\n\n    if (canUseDOM) {\n      window.Intercom('trackEvent', event, props);\n    }\n  },\n\n  trackPage(options = {}) {\n    const event = { event: 'page viewed' };\n    const mergedOptions = assign(event, options);\n\n    this.trackEvent(mergedOptions);\n  },\n\n  willDestroy() {\n    if (canUseDOM) {\n      $('script[src*=\"intercom\"]').remove();\n      delete window.Intercom;\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/addon/metrics-adapters/mixpanel.js":"import Ember from 'ember';\nimport canUseDOM from '../utils/can-use-dom';\nimport objectTransforms from '../utils/object-transforms';\nimport BaseAdapter from './base';\n\nconst {\n  assert,\n  $,\n  get,\n} = Ember;\nconst {\n  without,\n  compact,\n  isPresent\n} = objectTransforms;\nconst assign = Ember.assign || Ember.merge;\n\nexport default BaseAdapter.extend({\n  toStringExtension() {\n    return 'Mixpanel';\n  },\n\n  init() {\n    const config = get(this, 'config');\n    const { token } = config;\n\n    assert(`[ember-metrics] You must pass a valid \\`token\\` to the ${this.toString()} adapter`, token);\n\n    if (canUseDOM) {\n      /* jshint ignore:start */\n      (function(e,a){if(!a.__SV){var b=window;try{var c,l,i,j=b.location,g=j.hash;c=function(a,b){return(l=a.match(RegExp(b+\"=([^&]*)\")))?l[1]:null};g&&c(g,\"state\")&&(i=JSON.parse(decodeURIComponent(c(g,\"state\"))),\"mpeditor\"===i.action&&(b.sessionStorage.setItem(\"_mpcehash\",g),history.replaceState(i.desiredHash||\"\",e.title,j.pathname+j.search)))}catch(m){}var k,h;window.mixpanel=a;a._i=[];a.init=function(b,c,f){function e(b,a){var c=a.split(\".\");2==c.length&&(b=b[c[0]],a=c[1]);b[a]=function(){b.push([a].concat(Array.prototype.slice.call(arguments,\n      0)))}}var d=a;\"undefined\"!==typeof f?d=a[f]=[]:f=\"mixpanel\";d.people=d.people||[];d.toString=function(b){var a=\"mixpanel\";\"mixpanel\"!==f&&(a+=\".\"+f);b||(a+=\" (stub)\");return a};d.people.toString=function(){return d.toString(1)+\".people (stub)\"};k=\"disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config reset people.set people.set_once people.increment people.append people.union people.track_charge people.clear_charges people.delete_user\".split(\" \");\n      for(h=0;h<k.length;h++)e(d,k[h]);a._i.push([b,c,f])};a.__SV=1.2;b=e.createElement(\"script\");b.type=\"text/javascript\";b.async=!0;b.src=\"undefined\"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:\"file:\"===e.location.protocol&&\"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\".match(/^\\/\\//)?\"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\":\"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\";c=e.getElementsByTagName(\"script\")[0];c.parentNode.insertBefore(b,c)}})(document,window.mixpanel||[]);\n      mixpanel.init(token,{\"api_host\":\"https://api.mixpanel.com\",\"secure_cookie\":true});\n      /* jshint ignore:end */\n    }\n  },\n\n  identify(options = {}) {\n    const compactedOptions = compact(options);\n    const { distinctId } = compactedOptions;\n    const props = without(compactedOptions, 'distinctId');\n\n    if (isPresent(props) && canUseDOM) {\n      window.mixpanel.identify(distinctId);\n      window.mixpanel.people.set(props);\n    } else if (canUseDOM){\n      window.mixpanel.identify(distinctId);\n    }\n  },\n\n  trackEvent(options = {}) {\n    const compactedOptions = compact(options);\n    const { event } = compactedOptions;\n    const props = without(compactedOptions, 'event');\n\n    if (isPresent(props) && canUseDOM) {\n      window.mixpanel.track(event, props);\n    } else if (canUseDOM){\n      window.mixpanel.track(event);\n    }\n  },\n\n  trackPage(options = {}) {\n    const event = { event: 'page viewed' };\n    const mergedOptions = assign(event, options);\n\n    this.trackEvent(mergedOptions);\n  },\n\n  alias(options = {}) {\n    const compactedOptions = compact(options);\n    const { alias, original } = compactedOptions;\n\n    if (original && canUseDOM) {\n      window.mixpanel.alias(alias, original);\n    } else if (canUseDOM){\n      window.mixpanel.alias(alias);\n    }\n  },\n\n  willDestroy() {\n    if (canUseDOM) {\n      $('script[src*=\"mixpanel\"]').remove();\n      delete window.mixpanel;\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/addon/metrics-adapters/piwik.js":"import Ember from 'ember';\nimport canUseDOM from '../utils/can-use-dom';\nimport BaseAdapter from './base';\n\nconst {\n  assert,\n  $,\n  get\n} = Ember;\n\nexport default BaseAdapter.extend({\n  toStringExtension() {\n    return 'Piwik';\n  },\n\n  init() {\n    const config = get(this, 'config');\n    const { piwikUrl, siteId } = config;\n\n    assert(`[ember-metrics] You must pass a \\`piwikUrl\\` and a \\`siteId\\` to the ${this.toString()} adapter`, piwikUrl && siteId);\n\n    if(canUseDOM) {\n      window._paq = window._paq || [];\n      (function() {\n        window._paq.push(['setTrackerUrl', `${piwikUrl}/piwik.php`]);\n        window._paq.push(['setSiteId', siteId]);\n        var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n        g.type='text/javascript'; g.async=true; g.defer=true; g.src=`${piwikUrl}/piwik.js`; s.parentNode.insertBefore(g,s);\n      })();\n    }\n  },\n\n  identify(options = {}) {\n    if(canUseDOM) {\n      window._paq.push(['setUserId', options.userId]);\n    }\n  },\n\n  trackEvent(options = {}) {\n    if(canUseDOM) {\n      window._paq.push(['trackEvent', options.category, options.action, options.name, options.value]);\n    }\n  },\n\n  trackPage(options = {}) {\n    if(canUseDOM) {\n      window._paq.push(['setCustomUrl', options.page]);\n      window._paq.push(['trackPageView', options.title]);\n    }\n  },\n\n  willDestroy() {\n    if(canUseDOM) {\n      $('script[src*=\"piwik\"]').remove();\n      delete window._paq;\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/addon/metrics-adapters/segment.js":"import Ember from 'ember';\nimport canUseDOM from '../utils/can-use-dom';\nimport { compact } from '../utils/object-transforms';\nimport BaseAdapter from './base';\n\nconst {\n  $,\n  assert,\n  copy,\n  get\n} = Ember;\n\nexport default BaseAdapter.extend({\n  toStringExtension() {\n    return 'Segment';\n  },\n\n  init() {\n    const config = copy(get(this, 'config'));\n    const segmentKey = config.key;\n\n    assert(`[ember-metrics] You must pass a valid \\`key\\` to the ${this.toString()} adapter`, segmentKey);\n\n    if (canUseDOM) {\n      /* jshint ignore:start */\n      window.analytics=window.analytics||[],window.analytics.methods=[\"identify\",\"group\",\"track\",\"page\",\"pageview\",\"alias\",\"ready\",\"on\",\"once\",\"off\",\"trackLink\",\"trackForm\",\"trackClick\",\"trackSubmit\"],window.analytics.factory=function(t){return function(){var a=Array.prototype.slice.call(arguments);return a.unshift(t),window.analytics.push(a),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var key=window.analytics.methods[i];window.analytics[key]=window.analytics.factory(key)}window.analytics.load=function(t){if(!document.getElementById(\"analytics-js\")){var a=document.createElement(\"script\");a.type=\"text/javascript\",a.id=\"analytics-js\",a.async=!0,a.src=(\"https:\"===document.location.protocol?\"https://\":\"http://\")+\"cdn.segment.com/analytics.js/v1/\"+t+\"/analytics.min.js\";var n=document.getElementsByTagName(\"script\")[0];n.parentNode.insertBefore(a,n)}},window.analytics.SNIPPET_VERSION=\"2.0.9\";\n      /* jshint ignore:end */\n      window.analytics.load(segmentKey);\n    }\n  },\n\n  alias(options = {}) {\n    const compactedOptions = compact(options);\n    const { alias, original } = compactedOptions;\n\n    if (original && canUseDOM) {\n      window.analytics.alias(alias, original);\n    } else if (canUseDOM){\n      window.analytics.alias(alias);\n    }\n  },\n\n  identify(options = {}) {\n    const compactedOptions = compact(options);\n    const { distinctId } = compactedOptions;\n    delete compactedOptions.distinctId;\n    if(canUseDOM) {\n      window.analytics.identify(distinctId, compactedOptions);\n    }\n  },\n\n  trackEvent(options = {}) {\n    const compactedOptions = compact(options);\n    const { event } = compactedOptions;\n    delete compactedOptions.event;\n\n    if(canUseDOM) {\n      window.analytics.track(event, compactedOptions);\n    }\n  },\n\n  trackPage(options = {}) {\n    const compactedOptions = compact(options);\n    const { page } = compactedOptions;\n    delete compactedOptions.page;\n\n    if(canUseDOM) {\n      window.analytics.page(page, compactedOptions);\n    }\n  },\n\n  willDestroy() {\n    if(canUseDOM) {\n      $('script[src*=\"segment.com\"]').remove();\n      delete window.analytics;\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/addon/services/metrics.js":"import Ember from 'ember';\n\nconst {\n  Service,\n  getWithDefault,\n  assert,\n  get,\n  set,\n  copy,\n  makeArray,\n  A: emberArray,\n  String: { dasherize },\n  getOwner\n} = Ember;\nconst { keys } = Object;\nconst assign = Ember.assign || Ember.merge;\n\nexport default Service.extend({\n  /**\n   * Cached adapters to reduce multiple expensive lookups.\n   *\n   * @property _adapters\n   * @private\n   * @type Object\n   * @default null\n   */\n  _adapters: null,\n\n  /**\n   * Contextual information attached to each call to an adapter. Often you'll\n   * want to include things like `currentUser.name` with every event or page\n   * view  that's tracked. Any properties that you bind to `metrics.context`\n   * will be merged into the options for every service call.\n   *\n   * @property context\n   * @type Object\n   * @default null\n   */\n  context: null,\n\n  /**\n   * Indicates whether calls to the service will be forwarded to the adapters\n   *\n   * @property enabled\n   * @type Boolean\n   * @default true\n   */\n  enabled: true,\n\n  /**\n   * When the Service is created, activate adapters that were specified in the\n   * configuration. This config is injected into the Service as\n   * `options`.\n   *\n   * @method init\n   * @param {Void}\n   * @return {Void}\n   */\n  init() {\n    const adapters = getWithDefault(this, 'options.metricsAdapters', emberArray());\n    const owner = getOwner(this);\n    owner.registerOptionsForType('ember-metrics@metrics-adapter', { instantiate: false });\n    owner.registerOptionsForType('metrics-adapter', { instantiate: false });\n    set(this, 'appEnvironment', getWithDefault(this, 'options.environment', 'development'));\n    set(this, '_adapters', {});\n    set(this, 'context', {});\n    this.activateAdapters(adapters);\n    this._super(...arguments);\n  },\n\n  identify(...args) {\n    this.invoke('identify', ...args);\n  },\n\n  alias(...args) {\n    this.invoke('alias', ...args);\n  },\n\n  trackEvent(...args) {\n    this.invoke('trackEvent', ...args);\n  },\n\n  trackPage(...args) {\n    this.invoke('trackPage', ...args);\n  },\n\n  /**\n   * Instantiates the adapters specified in the configuration and caches them\n   * for future retrieval.\n   *\n   * @method activateAdapters\n   * @param {Array} adapterOptions\n   * @return {Object} instantiated adapters\n   */\n  activateAdapters(adapterOptions = []) {\n    const appEnvironment = get(this, 'appEnvironment');\n    const cachedAdapters = get(this, '_adapters');\n    const activatedAdapters = {};\n\n    adapterOptions\n      .filter((adapterOption) => this._filterEnvironments(adapterOption, appEnvironment))\n      .forEach((adapterOption) => {\n        const { name } = adapterOption;\n        const adapter = cachedAdapters[name] ? cachedAdapters[name] : this._activateAdapter(adapterOption);\n\n        set(activatedAdapters, name, adapter);\n      });\n\n    return set(this, '_adapters', activatedAdapters);\n  },\n\n  /**\n   * Invokes a method on the passed adapter, or across all activated adapters if not passed.\n   *\n   * @method invoke\n   * @param {String} methodName\n   * @param {Rest} args\n   * @return {Void}\n   */\n  invoke(methodName, ...args) {\n    if (!get(this, 'enabled')) { return; }\n\n    const cachedAdapters = get(this, '_adapters');\n    const allAdapterNames = keys(cachedAdapters);\n    const [selectedAdapterNames, options] = args.length > 1 ? [makeArray(args[0]), args[1]] : [allAdapterNames, args[0]];\n    const context = copy(get(this, 'context'));\n    const mergedOptions = assign(context, options);\n\n    selectedAdapterNames\n      .map((adapterName) => get(cachedAdapters, adapterName))\n      .forEach((adapter) => adapter && adapter[methodName](mergedOptions));\n  },\n\n  /**\n   * On teardown, destroy cached adapters together with the Service.\n   *\n   * @method willDestroy\n   * @param {Void}\n   * @return {Void}\n   */\n  willDestroy() {\n    const cachedAdapters = get(this, '_adapters');\n\n    for (let adapterName in cachedAdapters) {\n      get(cachedAdapters, adapterName).destroy();\n    }\n  },\n\n  /**\n   * Instantiates an adapter if one is found.\n   *\n   * @method _activateAdapter\n   * @param {Object}\n   * @private\n   * @return {Adapter}\n   */\n  _activateAdapter({ name, config } = {}) {\n    const Adapter = this._lookupAdapter(name);\n    assert(`[ember-metrics] Could not find metrics adapter ${name}.`, Adapter);\n\n    return Adapter.create({ this, config });\n  },\n\n  /**\n   * Looks up the adapter from the container. Prioritizes the consuming app's\n   * adapters over the addon's adapters.\n   *\n   * @method _lookupAdapter\n   * @param {String} adapterName\n   * @private\n   * @return {Adapter} a local adapter or an adapter from the addon\n   */\n  _lookupAdapter(adapterName) {\n    assert('[ember-metrics] Could not find metrics adapter without a name.', adapterName);\n\n    const dasherizedAdapterName = dasherize(adapterName);\n    const availableAdapter = getOwner(this).lookup(`ember-metrics@metrics-adapter:${dasherizedAdapterName}`);\n    const localAdapter = getOwner(this).lookup(`metrics-adapter:${dasherizedAdapterName}`);\n\n    return localAdapter ? localAdapter : availableAdapter;\n  },\n\n  /**\n   * Predicate that Filters out adapters that should not be activated in the\n   * current application environment. Defaults to all environments if the option\n   * is `all` or undefined.\n   *\n   * @method _filterEnvironments\n   * @param {Object} adapterOption\n   * @param {String} appEnvironment\n   * @private\n   * @return {Boolean} should an adapter be activated\n   */\n  _filterEnvironments(adapterOption, appEnvironment) {\n    let { environments } = adapterOption;\n    environments = environments || ['all'];\n    const wrappedEnvironments = emberArray(environments);\n\n    return wrappedEnvironments.indexOf('all') > -1 || wrappedEnvironments.indexOf(appEnvironment) > -1;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/addon/utils/can-use-dom.js":"const canUseDOM = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nexport default canUseDOM;\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/addon/utils/object-transforms.js":"import Ember from 'ember';\n\nexport function compact(objectInstance) {\n  const compactedObject = {};\n\n  for (let key in objectInstance) {\n    const value = objectInstance[key];\n\n    if (Ember.isPresent(value)) {\n      compactedObject[key] = value;\n    }\n  }\n\n  return compactedObject;\n}\n\n\nexport function without(originalObj, keysToRemove) {\n  let newObj = {};\n  const allKeys = Object.keys(originalObj);\n\n  allKeys.forEach((key) => {\n    if (keysToRemove.indexOf(key) === -1) {\n      newObj[key] = originalObj[key];\n    }\n  });\n\n  return newObj;\n}\n\nexport function only(originalObj, keysToRemain) {\n  let newObj = {};\n  const allKeys = Object.keys(originalObj);\n\n  allKeys.forEach((key) => {\n    if (keysToRemain.indexOf(key) !== -1) {\n      newObj[key] = originalObj[key];\n    }\n  });\n\n  return newObj;\n}\n\nexport function isPresent(objectInstance) {\n  const keys = Object.keys(objectInstance);\n\n  return !!keys.length;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/app/initializers/metrics.js":"import config from '../config/environment';\n\nexport function initialize() {\n  const application = arguments[1] || arguments[0];\n  const { metricsAdapters = [] } = config;\n  const { environment = 'development' } = config;\n  const options = { metricsAdapters, environment };\n\n  application.register('config:metrics', options, { instantiate: false });\n  application.inject('service:metrics', 'options', 'config:metrics');\n}\n\nexport default {\n  name: 'metrics',\n  initialize\n};\n","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/app/services/metrics.js":"export { default } from 'ember-metrics/services/metrics';","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/app/utils/can-use-dom.js":"export { default } from 'ember-metrics/utils/can-use-dom';","/home/travis/build/npmtest/node-npmtest-ember-metrics/node_modules/ember-metrics/app/utils/object-transforms.js":"export { default } from 'ember-metrics/utils/object-transforms';\n"}